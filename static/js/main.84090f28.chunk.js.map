{"version":3,"sources":["types/pokemonTypes.ts","utils/Pokedex.ts","hooks/usePokemon.ts","hooks/usePokemonSpecies.ts","constants/colors.ts","utils/getPokemonTypeNames.ts","utils/getPokemonBackground.ts","components/StyledLink/StyledLink.tsx","pages/Pokemon/components/PokemonSection/PokemonSection.tsx","components/Badge/Badge.tsx","components/PokemonTypeBadge/PokemonTypeBadge.tsx","constants/stat.ts","pages/Pokemon/components/PokemonBasicInfo/PokemonBasicInfo.tsx","utils/getPokemonGenderRatio.ts","utils/getPokemonHeight.ts","utils/getPokemonCatchRate.ts","utils/getPokemonWeight.ts","utils/getPokemonHatchSteps.ts","utils/getPokemonAbilities.ts","utils/getPokemonEggGroups.ts","pages/Pokemon/components/PokemonProfile/PokemonProfile.tsx","hooks/useEvolutionChain.ts","containers/PokemonContainer.tsx","components/PokemonCard/PokemonCard.tsx","pages/Pokemon/components/PokemonEvolution/PokemonEvolution.tsx","hooks/useMove.ts","containers/MoveContainer.tsx","pages/Pokemon/components/PokemonMoves/PokemonMoves.tsx","pages/Pokemon/Pokemon.tsx","components/Pagination/utils.ts","components/Pagination/Pagination.tsx","components/Filter/Filter.tsx","hooks/usePokemonList.ts","pages/AllPokemons/constants.ts","pages/AllPokemons/AllPokemons.tsx","constants/limits.ts","serviceWorker.js","index.tsx","constants/url.js"],"names":["PokemonTypeName","PokemonStatName","P","Pokedex","usePokemon","nameOrId","useState","isLoading","setIsLoading","pokemon","setPokemon","useEffect","getPokemonByName","then","response","catch","console","error","finally","usePokemonSpecies","pokemonSpecies","setPokemonSpecies","getPokemonSpeciesByName","TYPE_COLOR_MAP","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","getPokemonTypeNames","types","map","type","name","getPokemonBackground","typeNames","type1","type2","React","memo","className","unstyled","linkProps","linkClassName","useMemo","classNames","StyledLink_unstyled","PokemonSection","title","isMain","children","sectionClassName","headerClassName","color","backgroundColor","volume","badgeClassName","Badge_volume","style","typeName","filling","colorProps","typeColor","STAT_MAP","hp","attack","defense","speed","pokemonTypeNames","id","stats","imgSrc","sprites","front_default","src","alt","key","stat","max","value","base_stat","getPokemonGenderRatio","gender_rate","femaleChance","maleChance","getPokemonHeight","height","getPokemonCatchRate","capture_rate","toFixed","getPokemonWeight","weight","getPokemonHatchSteps","hatch_counter","getPokemonAbilities","abilities","ability","join","getPokemonEggGroups","egg_groups","group","renderData","useCallback","property","capitalizeValue","valueClassName","useEvolutionChain","evolutionChainUrl","evolutionChain","setEvolutionChain","resource","pokemonColor","cardClassName","background","evolution_chain","url","getFlatChain","chain","evolves_to","length","species","index","arr","isPokemonLoading","to","useMove","move","setMove","getMoveByName","PokemonMove","showDetails","setShowDetails","preferredName","names","find","item","language","moveEffect","effect_chance","effect_entries","effect","replace","toString","moveIndicators","power","accuracy","pp","onClick","indicator","movesClassName","moves","moveItem","isMoveLoading","PokemonWrapper","match","params","isPokemonSpeciesLoading","pokemonBackground","getNextPageNumber","pageNumber","numberOfPages","getPrevPageNumber","count","limit","offset","setOffset","Math","ceil","getNumberOfPages","currentPageNumber","getCurrentPageNumber","nextPageNumber","afterNextPageNumber","prevPageNumber","beforePrevPageNumber","visiblePages","result","push","handlePageClick","paginationClassName","Filter","values","activeValue","onSetValue","usePokemonList","pokemonsList","setPokemonsList","getPokemonsList","getTypeByName","results","slice","next","previous","DEFAULT_FILTER_ALL","FILTERS","Object","parseInt","sessionStorage","getItem","activeFilter","setActiveFilter","undefined","handleSetOffset","newOffset","setItem","handleSetFilter","newFilter","renderPokemon","Boolean","window","location","hostname","ReactDOM","render","basename","process","exact","path","component","AllPokemons","Pokemon","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84090f28.chunk.js","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nimport { INamedAPIResource } from './commonTypes';\n\ninterface IPokemonSprites {\n  front_default: string;\n  front_shiny: string;\n  front_female: string;\n  front_shiny_female: string;\n  back_default: string;\n  back_shiny: string;\n  back_female: string;\n  back_shiny_female: string;\n}\n\nexport enum PokemonTypeName {\n  normal = 'normal',\n  fighting = 'fighting',\n  flying = 'flying',\n  poison = 'poison',\n  ground = 'ground',\n  rock = 'rock',\n  bug = 'bug',\n  ghost = 'ghost',\n  steel = 'steel',\n  fire = 'fire',\n  water = 'water',\n  grass = 'grass',\n  electric = 'electric',\n  psychic = 'psychic',\n  ice = 'ice',\n  dragon = 'dragon',\n  dark = 'dark',\n  fairy = 'fairy',\n}\n\nexport interface IPokemonType {\n  slot: number;\n  type: INamedAPIResource<PokemonTypeName>;\n}\n\ninterface IPokemonAbility {\n  ability: INamedAPIResource;\n  is_hidden: boolean;\n  slot: number;\n}\n\ninterface IPokemonMoveVersion {\n  move_learn_method: INamedAPIResource;\n  version_group: INamedAPIResource;\n  level_learned_at: number;\n}\n\ninterface IPokemonMove {\n  move: INamedAPIResource;\n  version_group_details: IPokemonMoveVersion[];\n}\n\nexport enum PokemonStatName {\n  hp = 'hp',\n  attack = 'attack',\n  defense = 'defense',\n  speed = 'speed',\n  'special-attack' = 'special-attack',\n  'special-defense' = 'special-defense',\n}\n\ninterface IPokemonStat {\n  stat: INamedAPIResource<PokemonStatName>;\n  effort: number;\n  base_stat: number;\n}\n\ninterface IVersionGameIndex {\n  game_index: number;\n  version: INamedAPIResource;\n}\n\ninterface IPokemonHeldItemVersion {\n  version: INamedAPIResource;\n  rarity: number;\n}\n\ninterface IPokemonHeldItem {\n  item: INamedAPIResource;\n  version_details: IPokemonHeldItemVersion[];\n}\n\nexport interface IPokemon {\n  id: number;\n  name: string;\n  base_experience: number;\n  height:number;\n  is_default: boolean;\n  order: number;\n  weight: number;\n  abilities: IPokemonAbility[];\n  forms: INamedAPIResource[];\n  game_indices: IVersionGameIndex[];\n  held_items: IPokemonHeldItem[];\n  location_area_encounters: string;\n  moves: IPokemonMove[];\n  sprites: IPokemonSprites;\n  species: INamedAPIResource;\n  stats: IPokemonStat[];\n  types: IPokemonType[];\n}\n","import { Pokedex } from 'pokeapi-js-wrapper';\n\nconst P = new Pokedex();\n\nexport default P;\n","import { useState, useEffect } from 'react';\nimport { IPokemon } from 'types/pokemonTypes';\nimport Pokedex from 'utils/Pokedex';\n\n// pokeapi-js-wrapper, Any function with the designation \"ByName\" can also be passed an integer ID.\nconst usePokemon = (nameOrId: string) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [pokemon, setPokemon] = useState<IPokemon>();\n\n  useEffect(() => {\n    setIsLoading(true);\n    Pokedex.getPokemonByName(nameOrId)\n      .then((response: IPokemon) => {\n        setPokemon(response);\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [nameOrId]);\n\n  return ({ isLoading, pokemon });\n};\n\nexport default usePokemon;\n","import { useState, useEffect } from 'react';\nimport { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\nimport Pokedex from 'utils/Pokedex';\n\n// pokeapi-js-wrapper, Any function with the designation \"ByName\" can also be passed an integer ID.\nconst usePokemonSpecies = (nameOrId: string) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [pokemonSpecies, setPokemonSpecies] = useState<IPokemonSpecies>();\n\n  useEffect(() => {\n    setIsLoading(true);\n    Pokedex.getPokemonSpeciesByName(nameOrId)\n      .then((response: IPokemonSpecies) => {\n        setPokemonSpecies(response);\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [nameOrId]);\n\n  return ({ isLoading, pokemonSpecies });\n};\n\nexport default usePokemonSpecies;\n","import { PokemonTypeName } from 'types/pokemonTypes';\n\n/* eslint-disable import/prefer-default-export */\nexport const TYPE_COLOR_MAP = {\n  [PokemonTypeName.normal]: '#9C9C63',\n  [PokemonTypeName.fighting]: '#AE2A24',\n  [PokemonTypeName.flying]: '#8E6FEB',\n  [PokemonTypeName.poison]: '#923A92',\n  [PokemonTypeName.ground]: '#DBB54D',\n  [PokemonTypeName.rock]: '#A48F32',\n  [PokemonTypeName.bug]: '#97A51D',\n  [PokemonTypeName.ghost]: '#644E88',\n  [PokemonTypeName.steel]: '#A0A0C0',\n  [PokemonTypeName.fire]: '#ED6D12',\n  [PokemonTypeName.water]: '#4578ED',\n  [PokemonTypeName.grass]: '#69C23D',\n  [PokemonTypeName.electric]: '#F6C913',\n  [PokemonTypeName.psychic]: '#F73670',\n  [PokemonTypeName.ice]: '#7ECECE',\n  [PokemonTypeName.dragon]: '#5E1DF7',\n  [PokemonTypeName.dark]: '#644E40',\n  [PokemonTypeName.fairy]: '#E87890',\n  // unknown: '',\n  // shadow: '',\n};\n","import { IPokemon } from 'types/pokemonTypes';\n\nconst getPokemonTypeNames = (pokemon: IPokemon) => pokemon.types.map(\n  ({ type: { name: typeName } }) => typeName,\n);\n\nexport default getPokemonTypeNames;\n","import { IPokemon } from 'types/pokemonTypes';\nimport { TYPE_COLOR_MAP } from 'constants/colors';\nimport getPokemonTypeNames from './getPokemonTypeNames';\n\nconst getPokemonBackground = (pokemon: IPokemon) => {\n  const typeNames = getPokemonTypeNames(pokemon);\n\n  const [type1, type2] = typeNames;\n\n  if (!type1) {\n    return undefined;\n  }\n\n  if (!type2) {\n    return TYPE_COLOR_MAP[type1];\n  }\n\n  return `linear-gradient(90deg, ${TYPE_COLOR_MAP[type1]} 50%, ${TYPE_COLOR_MAP[type2]} 50%)`;\n};\n\nexport default getPokemonBackground;\n","import React, { HTMLAttributes, useMemo } from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport './StyledLink.scss';\n\nconst StyledLink: React.FC<{\n  unstyled?: boolean;\n} & LinkProps & HTMLAttributes<HTMLAnchorElement>> = ({\n  className,\n  unstyled = true,\n  ...linkProps\n}) => {\n  const linkClassName = useMemo(() => classNames('StyledLink', className, {\n    StyledLink_unstyled: unstyled,\n  }), [className, unstyled]);\n\n  return <Link className={linkClassName} {...linkProps} />;\n};\n\nexport default React.memo(StyledLink);\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './PokemonSection.scss';\n\nconst PokemonSection: React.FC<{\n  title: string;\n  isMain?: boolean;\n  className?: string;\n  children: React.ReactNode;\n}> = ({\n  title, isMain, className, children,\n}) => {\n  const sectionClassName = classNames('PokemonSection', className);\n\n  const headerClassName = classNames('PokemonSection-Header', {\n    'PokemonSection-Header_main': isMain,\n  });\n\n  return (\n    <section className={sectionClassName}>\n      <header className={headerClassName}>\n        {title}\n      </header>\n      {children}\n    </section>\n  );\n};\n\nexport default PokemonSection;\n","import React, { HTMLAttributes, useMemo } from 'react';\nimport classNames from 'classnames';\n\nimport './Badge.scss';\n\nconst Badge: React.FC<{\n  children: string;\n  color?: string;\n  backgroundColor?: string;\n  volume?: boolean;\n} & HTMLAttributes<HTMLSpanElement>> = ({\n  children, color, backgroundColor, volume, className,\n}) => {\n  const badgeClassName = useMemo(() => classNames('Badge', className, {\n    Badge_volume: volume,\n  }), [className, volume]);\n\n  return (\n    <span\n      style={{ color, backgroundColor }}\n      className={badgeClassName}\n    >\n      {children}\n\n    </span>\n  );\n};\n\nexport default React.memo(Badge);\n","import React, { HTMLAttributes, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { PokemonTypeName } from 'types/pokemonTypes';\nimport { TYPE_COLOR_MAP } from 'constants/colors';\nimport Badge from 'components/Badge';\n\nconst PokemonTypeBadge: React.FC<{\n  children: string;\n  typeName: PokemonTypeName;\n  filling?: boolean;\n  volume?: boolean;\n} & HTMLAttributes<HTMLSpanElement>> = ({\n  children, typeName, filling, volume, className,\n}) => {\n  const badgeClassName = useMemo(() => classNames('PokemonTypeBadge', className, {\n  }), [className]);\n\n  const colorProps = useMemo(() => {\n    const typeColor = TYPE_COLOR_MAP[typeName];\n\n    if (filling) {\n      return { backgroundColor: typeColor, color: 'white' };\n    }\n\n    return { color: typeColor };\n  }, [filling, typeName]);\n\n  return (\n    <Badge\n      className={badgeClassName}\n      volume={volume}\n      {...colorProps}\n    >\n      {children}\n    </Badge>\n  );\n};\n\nexport default React.memo(PokemonTypeBadge);\n","import { PokemonStatName } from 'types/pokemonTypes';\n\n/* eslint-disable import/prefer-default-export */\nexport const STAT_MAP = {\n  [PokemonStatName.hp]: 'HP',\n  [PokemonStatName.attack]: 'Attack',\n  [PokemonStatName.defense]: 'Defense',\n  [PokemonStatName.speed]: 'Speed',\n  [PokemonStatName['special-attack']]: 'Sp Atk',\n  [PokemonStatName['special-defense']]: 'Sp Def',\n};\n","import React from 'react';\nimport { IPokemon } from 'types/pokemonTypes';\nimport getPokemonTypeNames from 'utils/getPokemonTypeNames';\nimport PokemonTypeBadge from 'components/PokemonTypeBadge';\nimport { STAT_MAP } from 'constants/stat';\n\nimport './PokemonBasicInfo.scss';\n\nconst PokemonBasicInfo: React.FC<{\n  pokemon: IPokemon;\n}> = ({ pokemon }) => {\n  const pokemonTypeNames = getPokemonTypeNames(pokemon);\n\n  const {\n    name, id, stats, sprites: { front_default: imgSrc },\n  } = pokemon;\n\n\n  return (\n    <div className=\"PokemonBasicInfo\">\n      {imgSrc\n        ? <img className=\"PokemonBasicInfo-Image\" src={imgSrc} alt={name} />\n        : <div className=\"PokemonBasicInfo-Image PokemonBasicInfo-Image_none\">?</div>\n      }\n      <div className=\"PokemonBasicInfo-Data\">\n        <div className=\"PokemonBasicInfo-TypesAndId\">\n          <div className=\"PokemonBasicInfo-Types\">\n            {pokemonTypeNames.map(\n              typeName => (\n                <PokemonTypeBadge\n                  key={typeName}\n                  typeName={typeName}\n                  className=\"PokemonBasicInfo-Badge\"\n                  filling\n                  volume\n                >\n                  {typeName}\n                </PokemonTypeBadge>\n              ),\n            )}\n          </div>\n          <div className=\"PokemonBasicInfo-Id\">{id}</div>\n        </div>\n        <div className=\"PokemonBasicInfo-Stats\">\n          {\n            stats.map(stat => (\n              <div key={stat.stat.name} className=\"PokemonBasicInfo-Stat\">\n                <span className=\"PokemonBasicInfo-StatName\">\n                  {STAT_MAP[stat.stat.name]}\n                </span>\n                <progress\n                  className=\"PokemonBasicInfo-StatProgress\"\n                  max={100}\n                  value={stat.base_stat}\n                  title={`${stat.base_stat}`}\n                />\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(PokemonBasicInfo);\n","import { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\n\nconst getPokemonGenderRatio = ({ gender_rate }: IPokemonSpecies) => {\n  // gender_rate - The chance of this Pokémon being female, in eighths; or -1 for genderless\n  // https://github.com/PokeAPI/pokeapi/blob/master/pokemon_v2/README.md#pokemonspecies\n  let femaleChance = 0;\n  let maleChance = 0;\n\n  if (gender_rate !== -1) {\n    femaleChance = gender_rate * 100 / 8;\n    maleChance = 100 - femaleChance;\n  }\n\n  return `${maleChance}% \\u2642 ${femaleChance}% \\u2640`;\n};\n\nexport default getPokemonGenderRatio;\n","import { IPokemon } from 'types/pokemonTypes';\n\nconst getPokemonHeight = ({ height }: IPokemon) => `${height / 10} m`;\n\nexport default getPokemonHeight;\n","import { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\n\nconst getPokemonCatchRate = (\n  { capture_rate }: IPokemonSpecies,\n) => `${(capture_rate * 100 / 255).toFixed(2)}%`;\n\nexport default getPokemonCatchRate;\n","import { IPokemon } from 'types/pokemonTypes';\n\nconst getPokemonWeight = ({ weight }: IPokemon) => `${weight / 10} kg`;\n\nexport default getPokemonWeight;\n","import { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\n\n// Initial hatch counter: one must walk 255 × (hatch_counter + 1) steps\n// before this Pokémon's egg hatches, unless utilizing bonuses like Flame Body's.\nconst getPokemonHatchSteps = ({ hatch_counter }: IPokemonSpecies) => 255 * hatch_counter;\n\nexport default getPokemonHatchSteps;\n","import { IPokemon } from 'types/pokemonTypes';\n\nconst getPokemonAbilities = (\n  { abilities }: IPokemon,\n) => abilities.map(ability => ability.ability.name).join(', ');\n\nexport default getPokemonAbilities;\n","import { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\n\nconst getPokemonEggGroups = (\n  { egg_groups }: IPokemonSpecies,\n) => egg_groups.map(group => group.name).join(', ');\n\nexport default getPokemonEggGroups;\n","import React, { useCallback } from 'react';\nimport { IPokemon } from 'types/pokemonTypes';\nimport { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\nimport getPokemonGenderRatio from 'utils/getPokemonGenderRatio';\nimport getPokemonHeight from 'utils/getPokemonHeight';\nimport getPokemonCatchRate from 'utils/getPokemonCatchRate';\nimport getPokemonWeight from 'utils/getPokemonWeight';\nimport classNames from 'classnames';\nimport getPokemonHatchSteps from 'utils/getPokemonHatchSteps';\nimport getPokemonAbilities from 'utils/getPokemonAbilities';\nimport getPokemonEggGroups from 'utils/getPokemonEggGroups';\n\nimport './PokemonProfile.scss';\n\nconst PokemonProfile: React.FC<{\n  pokemon: IPokemon;\n  pokemonSpecies: IPokemonSpecies;\n}> = ({ pokemon, pokemonSpecies }) => {\n  const renderData = useCallback((property, value, capitalizeValue?: boolean) => {\n    const valueClassName = classNames('PokemonProfile-Value', {\n      'PokemonProfile-Value_capitalize': capitalizeValue,\n    });\n\n    return (\n      <div className=\"PokemonProfile-Data\">\n        <span className=\"PokemonProfile-Property\">{property}</span>\n        <span className={valueClassName}>{value}</span>\n      </div>\n    );\n  }, []);\n\n  return (\n    <div className=\"PokemonProfile\">\n      <div className=\"PokemonProfile-Column\">\n        {renderData('Height', getPokemonHeight(pokemon))}\n        {renderData('Catch Rate', getPokemonCatchRate(pokemonSpecies))}\n        {renderData('Egg Groups', getPokemonEggGroups(pokemonSpecies), true)}\n        {renderData('Abilities', getPokemonAbilities(pokemon), true)}\n      </div>\n      <div className=\"PokemonProfile-Column\">\n        {renderData('Weight', getPokemonWeight(pokemon))}\n        {renderData('Gender Ratio', getPokemonGenderRatio(pokemonSpecies))}\n        {renderData('Hatch Steps', getPokemonHatchSteps(pokemonSpecies))}\n        {renderData('EVs', 'N/A')}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(PokemonProfile);\n","import { useState, useEffect } from 'react';\nimport Pokedex from 'utils/Pokedex';\nimport { IEvolutionChain } from 'types/evolutionChainTypes';\n\nconst useEvolutionChain = (evolutionChainUrl: string) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [evolutionChain, setEvolutionChain] = useState<IEvolutionChain>();\n\n  useEffect(() => {\n    setIsLoading(true);\n    Pokedex.resource(evolutionChainUrl)\n      .then((response: IEvolutionChain) => {\n        setEvolutionChain(response);\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [evolutionChainUrl]);\n\n  return ({ isLoading, evolutionChain });\n};\n\nexport default useEvolutionChain;\n","import React from 'react';\nimport { IPokemon } from 'types/pokemonTypes';\nimport usePokemon from 'hooks/usePokemon';\n\nconst PokemonContainer: React.FC<{\n  name: string,\n  children: (isLoading: boolean, pokemon?: IPokemon) => React.ReactNode;\n}> = ({\n  name,\n  children,\n}) => {\n  const { isLoading, pokemon } = usePokemon(name);\n\n  return (\n    <>\n      {children(isLoading, pokemon)}\n    </>\n  );\n};\n\nexport default React.memo(PokemonContainer);\n","import React, { useMemo, HTMLAttributes } from 'react';\nimport classNames from 'classnames';\nimport { IPokemon } from 'types/pokemonTypes';\nimport PokemonTypeBadge from 'components/PokemonTypeBadge';\nimport getPokemonBackground from 'utils/getPokemonBackground';\nimport getPokemonTypeNames from 'utils/getPokemonTypeNames';\n\nimport './PokemonCard.scss';\n\nconst PokemonCard: React.FC<{\n  pokemon: IPokemon,\n} & HTMLAttributes<HTMLElement>> = ({\n  pokemon,\n  className,\n}) => {\n  const pokemonTypeNames = useMemo(() => getPokemonTypeNames(pokemon), [pokemon]);\n  const pokemonColor = useMemo(() => getPokemonBackground(pokemon), [pokemon]);\n\n  const cardClassName = useMemo(() => classNames('PokemonCard', className), [className]);\n\n  const { name, id, sprites: { front_default: imgSrc } } = pokemon;\n\n  return (\n    <figure className={cardClassName} style={{ background: pokemonColor }}>\n      {imgSrc\n        ? <img src={imgSrc} alt={name} className=\"PokemonCard-Image\" />\n        : <div className=\"PokemonCard-Image PokemonCard-Image_none\">?</div>\n      }\n      <figcaption className=\"PokemonCard-Caption\">\n        <div className=\"PokemonCard-Id\">{id}</div>\n        <div className=\"PokemonCard-Name\">{name}</div>\n        <div className=\"PokemonCard-Types\">\n          {pokemonTypeNames.map(typeName => (\n            <PokemonTypeBadge\n              key={typeName}\n              typeName={typeName}\n              className=\"PokemonCard-Type\"\n            >\n              {typeName}\n            </PokemonTypeBadge>\n          ))\n          }\n        </div>\n      </figcaption>\n    </figure>\n  );\n};\n\nexport default React.memo(PokemonCard);\n","import React, { useCallback } from 'react';\nimport { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\nimport useEvolutionChain from 'hooks/useEvolutionChain';\nimport { IChainLink } from 'types/evolutionChainTypes';\nimport PokemonContainer from 'containers/PokemonContainer';\nimport PokemonCard from 'components/PokemonCard';\nimport StyledLink from 'components/StyledLink';\n\nimport './PokemonEvolution.scss';\n\nconst PokemonEvolution: React.FC<{\n  pokemonSpecies: IPokemonSpecies;\n}> = ({ pokemonSpecies }) => {\n  const { isLoading, evolutionChain } = useEvolutionChain(\n    pokemonSpecies.evolution_chain.url,\n  );\n\n  const getFlatChain = useCallback((chain: IChainLink): string[] => {\n    if (chain.evolves_to.length) {\n      return [chain.species.name, ...getFlatChain(chain.evolves_to[0])];\n    }\n\n    return [chain.species.name];\n  }, []);\n\n  if (isLoading || !evolutionChain) return null;\n\n  return (\n    <div className=\"PokemonEvolution\">\n      {\n        getFlatChain(evolutionChain.chain).map((name, index, arr) => (\n          <PokemonContainer key={name} name={name}>\n            {\n              (isPokemonLoading, pokemon) => pokemon && (\n              <>\n                <StyledLink to={`/pokemon/${name}`} className=\"PokemonEvolution-PokemonLink\">\n                  <PokemonCard pokemon={pokemon} />\n                </StyledLink>\n                {index + 1 !== arr.length && <span className=\"PokemonEvolution-Arrow\">🡆</span>}\n              </>\n              )\n            }\n          </PokemonContainer>\n        ))\n      }\n    </div>\n  );\n};\n\nexport default React.memo(PokemonEvolution);\n","import { useState, useEffect } from 'react';\nimport { IMove } from 'types/moveTypes';\nimport Pokedex from 'utils/Pokedex';\n\n// pokeapi-js-wrapper, Any function with the designation \"ByName\" can also be passed an integer ID.\nconst useMove = (nameOrId: string) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [move, setMove] = useState<IMove>();\n\n  useEffect(() => {\n    setIsLoading(true);\n    Pokedex.getMoveByName(nameOrId)\n      .then((response: IMove) => {\n        setMove(response);\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [nameOrId]);\n\n  return ({ isLoading, move });\n};\n\nexport default useMove;\n","import React from 'react';\nimport { IMove } from 'types/moveTypes';\nimport useMove from 'hooks/useMove';\n\nconst MoveContainer: React.FC<{\n  name: string,\n  children: (isLoading: boolean, move?: IMove) => React.ReactNode;\n}> = ({\n  name,\n  children,\n}) => {\n  const { isLoading, move } = useMove(name);\n\n  return (\n    <>\n      {children(isLoading, move)}\n    </>\n  );\n};\n\nexport default React.memo(MoveContainer);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { IPokemon } from 'types/pokemonTypes';\nimport MoveContainer from 'containers/MoveContainer';\nimport PokemonTypeBadge from 'components/PokemonTypeBadge';\nimport { IMove } from 'types/moveTypes';\n\nimport './PokemonMoves.scss';\n\nconst PokemonMove: React.FC<{\n  move: IMove;\n}> = ({ move }) => {\n  const [showDetails, setShowDetails] = useState(false);\n\n  const preferredName = move.names.find(\n    item => item.language.name === 'en',\n  );\n\n  const moveEffect = move.effect_chance\n    ? move.effect_entries[0].effect.replace('$effect_chance%', move.effect_chance.toString())\n    : move.effect_entries[0].effect;\n\n  const moveIndicators: {name: string, value: string | number}[] = [\n    {\n      name: 'Power',\n      value: move.power || 'N/A',\n    },\n    {\n      name: 'Acc',\n      value: move.accuracy ? `${move.accuracy}%` : 'N/A',\n    },\n    {\n      name: 'PP',\n      value: move.pp || 'N/A',\n    },\n  ];\n\n  return (\n    <div\n      key={move.name}\n      className=\"PokemonMove\"\n    >\n      <div className=\"PokemonMove-Header\">\n        <div className=\"PokemonMove-Name\">\n          {preferredName\n            ? preferredName.name\n            : move.name\n          }\n        </div>\n        <PokemonTypeBadge\n          className=\"PokemonMove-Badge\"\n          typeName={move.type.name}\n          filling\n          volume\n        >\n          {move.type.name}\n        </PokemonTypeBadge>\n        <button\n          className=\"PokemonMove-ShowMore\"\n          onClick={() => {\n            setShowDetails(!showDetails);\n          }}\n        >\n          {showDetails ? '🡵' : '🡷'}\n        </button>\n      </div>\n      {showDetails && (\n        <div className=\"PokemonMove-Body\">\n          <div className=\"PokemonMove-Indicators\">\n            {\n              moveIndicators.map(indicator => (\n                <div key={indicator.name}>\n                  <span\n                    className=\"PokemonMove-IndicatorName\"\n                  >\n                    {indicator.name}\n                  </span>\n                  <span\n                    className=\"PokemonMove-IndicatorValue\"\n                  >\n                    {indicator.value}\n                  </span>\n                </div>\n              ))\n            }\n          </div>\n          <div className=\"PokemonMove-Effect\">\n            {moveEffect}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst PokemonMoves: React.FC<{\n  pokemon: IPokemon;\n}> = ({\n  pokemon,\n}) => {\n  const movesClassName = classNames('PokemonMoves');\n\n  return (\n    <div className={movesClassName}>\n      {\n        pokemon.moves.map(moveItem => (\n          <MoveContainer key={moveItem.move.name} name={moveItem.move.name}>\n            {(isMoveLoading, move) => move && <PokemonMove move={move} />}\n          </MoveContainer>\n        ))\n      }\n    </div>\n  );\n};\n\nexport default React.memo(PokemonMoves);\n","import React, { useMemo, HTMLAttributes } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport usePokemon from 'hooks/usePokemon';\nimport usePokemonSpecies from 'hooks/usePokemonSpecies';\nimport getPokemonBackground from 'utils/getPokemonBackground';\nimport StyledLink from 'components/StyledLink';\nimport PokemonSection from './components/PokemonSection';\nimport PokemonBasicInfo from './components/PokemonBasicInfo';\nimport PokemonProfile from './components/PokemonProfile';\nimport PokemonEvolution from './components/PokemonEvolution';\nimport PokemonMoves from './components/PokemonMoves';\n\nimport './Pokemon.scss';\n\nconst PokemonWrapper: React.FC<\n  HTMLAttributes<HTMLElement>\n> = ({ children, style }) => (\n  <main className=\"Pokemon\" style={style}>\n    <StyledLink className=\"Pokemon-Close\" to=\"/\">X</StyledLink>\n    {children}\n  </main>\n);\n\nconst Pokemon: React.FC<\n  RouteComponentProps<{\n    nameOrId: string\n  }>\n> = ({\n  match,\n}) => {\n  const nameOrId = useMemo(() => match.params.nameOrId, [match.params.nameOrId]);\n  const { isLoading: isPokemonLoading, pokemon } = usePokemon(nameOrId);\n  const { isLoading: isPokemonSpeciesLoading, pokemonSpecies } = usePokemonSpecies(nameOrId);\n\n  if (isPokemonLoading\n    || isPokemonSpeciesLoading\n    || !pokemon\n    || !pokemonSpecies\n  ) return <PokemonWrapper />;\n\n  const pokemonBackground = getPokemonBackground(pokemon);\n\n  return (\n    <PokemonWrapper style={{ background: pokemonBackground }}>\n      <div className=\"Pokemon-Body\">\n        <PokemonSection title={pokemon.name} isMain>\n          <PokemonBasicInfo pokemon={pokemon} />\n        </PokemonSection>\n\n        <PokemonSection className=\"Pokemon-RegularSection\" title=\"Profile\">\n          <PokemonProfile pokemon={pokemon} pokemonSpecies={pokemonSpecies} />\n        </PokemonSection>\n\n        <PokemonSection className=\"Pokemon-RegularSection\" title=\"Evolutions\">\n          <PokemonEvolution pokemonSpecies={pokemonSpecies} />\n        </PokemonSection>\n\n        <PokemonSection className=\"Pokemon-RegularSection\" title=\"Moves\">\n          <PokemonMoves pokemon={pokemon} />\n        </PokemonSection>\n      </div>\n    </PokemonWrapper>\n  );\n};\n\nexport default React.memo(Pokemon);\n","export const getNextPageNumber = (pageNumber: number | null, numberOfPages: number) => {\n  if (!pageNumber || pageNumber + 1 > numberOfPages) {\n    return null;\n  }\n  return pageNumber + 1;\n};\n\nexport const getPrevPageNumber = (pageNumber: number | null) => {\n  if (!pageNumber || pageNumber - 1 <= 0) {\n    return null;\n  }\n  return pageNumber - 1;\n};\n\nexport const getCurrentPageNumber = (offset: number, limit: number) => {\n  if (offset === 0) {\n    return 1;\n  }\n  return (offset / limit) + 1;\n};\n\nexport const getNumberOfPages = (count: number, limit:number) => Math.ceil(count / limit);\n","import React, { useMemo, HTMLAttributes, useCallback } from 'react';\nimport classNames from 'classnames';\nimport {\n  getCurrentPageNumber,\n  getNumberOfPages,\n  getNextPageNumber,\n  getPrevPageNumber,\n} from './utils';\n\nimport './Pagination.scss';\n\nconst Pagination: React.FC<{\n  count: number;\n  limit: number;\n  offset: number;\n  setOffset: (offset: number) => void;\n} & HTMLAttributes<HTMLElement>> = ({\n  count,\n  limit,\n  offset,\n  setOffset,\n  className,\n}) => {\n  const numberOfPages = useMemo(() => getNumberOfPages(count, limit), [count, limit]);\n  const currentPageNumber = useMemo(() => getCurrentPageNumber(offset, limit), [offset, limit]);\n  const nextPageNumber = useMemo(\n    () => getNextPageNumber(currentPageNumber, numberOfPages), [currentPageNumber, numberOfPages],\n  );\n  const afterNextPageNumber = useMemo(\n    () => getNextPageNumber(nextPageNumber, numberOfPages), [nextPageNumber, numberOfPages],\n  );\n  const prevPageNumber = useMemo(() => getPrevPageNumber(currentPageNumber), [currentPageNumber]);\n  const beforePrevPageNumber = useMemo(() => getPrevPageNumber(prevPageNumber), [prevPageNumber]);\n\n  const visiblePages = useMemo(() => {\n    const result: number[] = [];\n\n    if (prevPageNumber) {\n      result.push(prevPageNumber);\n\n      if (currentPageNumber === numberOfPages) {\n        if (beforePrevPageNumber) {\n          result.push(beforePrevPageNumber);\n        }\n      }\n    }\n\n    result.push(currentPageNumber);\n\n    if (nextPageNumber) {\n      result.push(nextPageNumber);\n\n      if (!prevPageNumber) {\n        if (afterNextPageNumber) {\n          result.push(afterNextPageNumber);\n        }\n      }\n    }\n\n    return result;\n  }, [\n    afterNextPageNumber,\n    beforePrevPageNumber,\n    currentPageNumber,\n    nextPageNumber,\n    numberOfPages,\n    prevPageNumber,\n  ]);\n\n  const handlePageClick = useCallback((pageNumber: number) => {\n    setOffset(limit * (pageNumber - 1));\n  }, [limit, setOffset]);\n\n  const paginationClassName = useMemo(() => classNames('Pagination', className), [className]);\n\n  return (\n    <nav className={paginationClassName}>\n      <ul className=\"Pagination-List\">\n        <li\n          className={\n            classNames(\n              'Pagination-Page',\n              {\n                'Pagination-Page_possible': prevPageNumber !== null,\n                'Pagination-Page_disabled': prevPageNumber === null,\n              },\n            )\n          }\n          onClick={() => { handlePageClick(1); }}\n        >\n          &lt;&lt;\n        </li>\n        {\n          visiblePages.map(\n            pageNumber => (\n              <li\n                key={pageNumber}\n                className={\n                  classNames(\n                    'Pagination-Page',\n                    {\n                      'Pagination-Page_active': pageNumber === currentPageNumber,\n                      'Pagination-Page_possible': pageNumber !== currentPageNumber,\n                    },\n                  )\n                }\n                onClick={() => { handlePageClick(pageNumber); }}\n              >\n                {pageNumber}\n              </li>\n            ),\n          )\n        }\n        <li\n          className={\n            classNames(\n              'Pagination-Page',\n              {\n                'Pagination-Page_possible': nextPageNumber !== null,\n                'Pagination-Page_disabled': nextPageNumber === null,\n              },\n            )\n          }\n          onClick={() => { handlePageClick(numberOfPages); }}\n        >\n          &gt;&gt;\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default React.memo(Pagination);\n","import React from 'react';\n\nimport './Filter.scss';\nimport classNames from 'classnames';\n\nconst Filter: React.FC<{\n  name: string;\n  values: string[];\n  activeValue: string;\n  onSetValue: (value: string) => void;\n}> = ({\n  name,\n  values,\n  activeValue,\n  onSetValue,\n}) => (\n  <nav className=\"Filter\">\n    <strong className=\"Filter-Name\">{`Filter by ${name}: `}</strong>\n    <ul className=\"Filter-List\">\n      {\n        values.map(value => (\n          <li\n            key={value}\n            className={classNames('Filter-Item', {\n              'Filter-Item_active': value === activeValue,\n            })}\n            // https://cdb.reacttraining.com/react-inline-functions-and-performance-bdff784f5578\n            onClick={() => { onSetValue(value); }}\n          >\n            {value}\n          </li>\n        ))\n      }\n    </ul>\n  </nav>\n);\n\nexport default Filter;\n","import { useState, useEffect, useCallback } from 'react';\nimport Pokedex from 'utils/Pokedex';\nimport { INamedAPIResourceList } from 'types/commonTypes';\nimport { IType } from 'types/typeTypes';\n\n// pokeapi-js-wrapper, Any function with the designation \"ByName\" can also be passed an integer ID.\nconst usePokemonList = (\n  limit: number,\n  offset: number,\n  typeName?: string,\n) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [pokemonsList, setPokemonsList] = useState<INamedAPIResourceList>();\n\n  const getPokemonsList = useCallback(() => {\n    setIsLoading(true);\n\n    Pokedex.getPokemonsList({\n      limit,\n      offset,\n    })\n      .then((response: INamedAPIResourceList) => {\n        setPokemonsList(response);\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [limit, offset]);\n\n  const getTypeByName = useCallback(() => {\n    setIsLoading(true);\n\n    Pokedex.getTypeByName(typeName)\n      .then((response: IType) => {\n        const count = response.pokemon.length;\n        const results = response.pokemon\n          .slice(offset, offset + limit)\n          .map(({ pokemon }) => pokemon);\n\n        setPokemonsList({\n          count,\n          results,\n          next: null,\n          previous: null,\n        });\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [limit, offset, typeName]);\n\n  useEffect(() => {\n    if (typeName) {\n      getTypeByName();\n    } else {\n      getPokemonsList();\n    }\n  }, [getPokemonsList, getTypeByName, limit, offset, typeName]);\n\n  return ({ isLoading, pokemonsList });\n};\n\nexport default usePokemonList;\n","import { PokemonTypeName } from 'types/pokemonTypes';\n\nexport const DEFAULT_FILTER_ALL = 'all';\n\nexport const FILTERS = [\n  DEFAULT_FILTER_ALL,\n  ...Object.values(PokemonTypeName),\n];\n","import React, { useState, useCallback } from 'react';\nimport { LIST_ITEMS_LIMIT } from 'constants/limits';\nimport PokemonContainer from 'containers/PokemonContainer';\nimport PokemonCard from 'components/PokemonCard';\nimport StyledLink from 'components/StyledLink';\nimport Pagination from 'components/Pagination';\nimport Filter from 'components/Filter';\nimport usePokemonList from 'hooks/usePokemonList';\nimport { DEFAULT_FILTER_ALL, FILTERS } from './constants';\n\nimport './AllPokemons.scss';\n\nconst AllPokemons: React.FC = () => {\n  const [offset, setOffset] = useState<number>(\n    parseInt(\n      sessionStorage.getItem('offset') || '0',\n      10,\n    ),\n  );\n\n  const [activeFilter, setActiveFilter] = useState<string>(\n    sessionStorage.getItem('filter') || DEFAULT_FILTER_ALL,\n  );\n\n  const { pokemonsList, isLoading } = usePokemonList(\n    LIST_ITEMS_LIMIT,\n    offset,\n    activeFilter !== DEFAULT_FILTER_ALL\n      ? activeFilter\n      : undefined,\n  );\n\n  const handleSetOffset = useCallback((newOffset: number) => {\n    sessionStorage.setItem('offset', `${newOffset}`);\n    setOffset(newOffset);\n  }, []);\n\n  const handleSetFilter = useCallback((newFilter: string) => {\n    sessionStorage.setItem('filter', `${newFilter}`);\n    setActiveFilter(newFilter);\n    setOffset(0);\n  }, []);\n\n  const renderPokemon = useCallback((name: string) => (\n    <PokemonContainer key={name} name={name}>\n      {(isPokemonLoading, pokemon) => !isPokemonLoading && pokemon && (\n        <StyledLink to={`/pokemon/${name}`} className=\"AllPokemons-PokemonLink\">\n          <PokemonCard pokemon={pokemon} />\n        </StyledLink>\n      )}\n    </PokemonContainer>\n  ), []);\n\n  return (\n    <div className=\"AllPokemons\">\n      <Filter\n        name=\"Type\"\n        values={FILTERS}\n        activeValue={activeFilter}\n        onSetValue={handleSetFilter}\n      />\n      {!isLoading && pokemonsList && (\n        <section className=\"AllPokemons-List\">\n          {pokemonsList.results.map(({ name }) => renderPokemon(name))}\n        </section>\n\n      )}\n      {pokemonsList\n        && (\n          <Pagination\n            className=\"AllPokemons-Nav\"\n            count={pokemonsList.count}\n            limit={LIST_ITEMS_LIMIT}\n            offset={offset}\n            setOffset={handleSetOffset}\n          />\n        )\n      }\n    </div>\n  );\n};\n\nexport default React.memo(AllPokemons);\n","/* eslint-disable import/prefer-default-export */\nexport const LIST_ITEMS_LIMIT = 20;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { BASE_URL } from 'constants/url';\nimport Pokemon from 'pages/Pokemon';\nimport AllPokemons from 'pages/AllPokemons';\nimport * as serviceWorker from './serviceWorker';\n\n//import 'normalize.css';\nimport 'styles/base.scss';\n\nReactDOM.render(\n  <Router basename={BASE_URL}>\n    <Switch>\n      <Route exact path=\"/\" component={AllPokemons} />\n      <Route path=\"/pokemon/:nameOrId\" component={Pokemon} />\n    </Switch>\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable import/prefer-default-export */\nexport const BASE_URL = process.env.PUBLIC_URL;\n"],"sourceRoot":""}